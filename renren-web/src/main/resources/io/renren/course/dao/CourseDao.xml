<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.course.dao.CourseDao">

	<select id="queryObject" resultType="io.renren.course.entity.CourseEntity">
		select c.*,(SELECT t.`name` from pl_teacher t where t.teacher_id=c.teacher_id ) as teacherName
 			from c_course c where course_id = #{value}
	</select>

	<select id="queryList" resultType="io.renren.course.entity.CourseEntity">
		SELECT newc.* from
 		(select c.*,
		(SELECT t.name from pl_teacher t where t.teacher_id=c.teacher_id ) as teacherName,
		(select dd.dd_name from data_dictionary dd where dd.dd_field = 'status' and dd.dd_value= c.`status`) as statusName,
		(SELECT COUNT(1) from c_course_record cr where cr.course_id=c.course_id ) as studentNumber
		 from c_course c) as newc 
		 <where>
		 	<if test="tenantId != null and tenantId.trim() != ''">
		 		and `tenant_id` = #{tenantId} 
		 	</if>
		 	<if test="key != null and key.trim() != ''">
				and `course_name` like concat('%',#{key},'%') or `teacherName` like concat('%',#{key},'%')
			</if>
		 </where>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by course_id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from c_course
		<where>
			<if test="tenantId != null and tenantId.trim() != ''">
		 		and `tenant_id` = #{tenantId} 
		 	</if>
		</where>
	</select>
	 
	<insert id="save" parameterType="io.renren.course.entity.CourseEntity" useGeneratedKeys="true" keyProperty="courseId">
		insert into c_course
		(
			`course_name`, 
			`remarks`,  
			`teacher_id`, 
			`status`, 
			`course_time`, 
			`start_date`, 
			`end_date`,
			`original_price`,
			`expend_time`,
			`year`,
			`quarter`,
			`tenant_id`
		)
		values
		(
			#{courseName}, 
			#{remarks}, 
			#{teacherId}, 
			0, 
			#{courseTime}, 
			#{startDate}, 
			#{endDate},
			#{originalPrice},
			#{expendTime},
			#{year},
			#{quarter},
			#{tenantId}
		)
	</insert>
	 
	<update id="update" parameterType="io.renren.course.entity.CourseEntity">
		update c_course 
		<set>
			<if test="courseName != null">`course_name` = #{courseName}, </if>
			<if test="remarks != null">`remarks` = #{remarks}, </if>
			<if test="lastUpdate != null">`last_update` = #{lastUpdate}, </if>
			<if test="teacherId != null">`teacher_id` = #{teacherId}, </if>
			<if test="courseTime != null">`course_time` = #{courseTime}, </if>
			<if test="expendTime != null">`expend_time` = #{expendTime}, </if>
			<if test="startDate != null">`start_date` = #{startDate}, </if>
			<if test="endDate != null">`end_date` = #{endDate},</if>
			<if test="originalPrice != null">`original_price` = #{originalPrice}</if>
		</set>
		where course_id = #{courseId}
	</update>
	
	<delete id="delete">
		delete from c_course where course_id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from c_course where course_id in 
		<foreach item="courseId" collection="array" open="(" separator="," close=")">
			#{courseId}
		</foreach>
	</delete>
	
	<select id="queryListInCourseIds" parameterType="java.util.List" resultType="io.renren.course.entity.CourseEntity">
		select c.*,
		(SELECT t.name from pl_teacher t where t.teacher_id=c.teacher_id ) as teacherName
		from c_course c
		where c.course_id in
		<foreach collection="courseIds" item="item" index="index"   
       		open="(" separator="," close=")">  
           	#{item} 
       	</foreach>
	</select>

</mapper>